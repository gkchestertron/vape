const path = require('path')
const fs   = require('fs')
const now  = Date.now() / 1000
const then = now - 10


function ModuleBuilder({ hook, folders }) {
  this.folders = folders
  this.hook = hook || 'run' // lets us set the hook to watch-run for dev mode
}

ModuleBuilder.prototype.apply = function (compiler) {
  compiler.plugin(this.hook, (compilationParams, callback) => {
    return Promise.all(this.folders.map(folder => handler(folder)))
    .then(() => {
      callback()
    })
    .catch(err => {
      console.error(err)
      callback()
    })
  })
}

function handler(folder) {
  // add ./ to naked folder names
  if (/^\w/.test(folder))
    folder = `./${folder}`


  // check for existing index file
  return new Promise((res, rej) => {
    fs.readFile(`${folder}/index.js`, (err, data) => {
      if (!err && !/^\/\* ModuleBuilder/.test(data))
        return rej('Index File Exists')
      res()
    })
  })

  // read through dir
  .then(() => {
    return new Promise((res, rej) => {
      fs.readdir(folder, (err, data) => {
        if (err)
          return rej(err)
        return res(data)
      })
    })
  })

  // build index file
  .then(files => {
    let index = '/* ModuleBuilder\n  Index file autogenerated by ModuleBuilder\n  Remove these lines or add cusomt to override builder\n*/\n\n'

    // import each file
    files.forEach(file => {
      if (/^\./.test(file))
        return
      index += `import ${file.split('.').slice(0, -1).join('.')} from './${file}'\n`
    })

    // start export object
    index += `\nexport default {\n`

      // export each file
      files.forEach(file => {
        if (/^\./.test(file))
          return
        index += `  ${file.split('.').slice(0, -1).join('.')},\n`
      })

      // end export object
      index += `}`

      return index
  })

  // clear file if it is there
  // ignore error
  .then(index => {
    return new Promise((res, rej) => {
      fs.unlink(`${folder}/index.js`, err => {
        if (err)
          return res(index)
        return res(index)
      })
    })
  })

  // write file
  .then(index => {
    return new Promise((res, rej) => {
      fs.writeFile(`${folder}/index.js`, index, err => {
        if (err)
          return rej(err)

        // backdate file to block watch loop
        let f = path.resolve(`${folder}/index.js`)
        fs.utimes(f, then, then, function (err) { if (err) throw err })

        // return success message
        return res(`${folder}/index.js written`)
      })
    })
  })

  // print success
  .then(result => console.log(result))

  // print out error if we already have an index file
  // or if some other error occurs
  .catch(err => console.log(err))
}

module.exports = ModuleBuilder
